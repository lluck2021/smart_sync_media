import React, { useState, useRef } from 'react';
import { tokens } from "../theme";
import { Box, Typography, CircularProgress, useTheme, TextField, Button } from '@mui/material';
import default_image from "./assets/Background_image.jpg";


const AI_Image = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const [imageUrl, setImageUrl] = useState("/");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const inputRef = useRef();
  const [input, setInput] = useState(""); //user's input
  const [post, setPost] = useState(""); //text generated by AI
  const h3Ref = useRef(null);
  const boxRef = useRef(null);

  const [apiKey, setApiKey] = useState("");
  const API_KEY = apiKey; 

  const imageGenerator = async () => {
    const input = inputRef.current.value;

    if (!input) {
      alert("Please enter a prompt.");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`https://api.openai.com/v1/images/generations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': "Bearer " + API_KEY, // Use environment variables for API key
          'User-Agent': 'Chrome',
        },
        body: JSON.stringify({
          prompt: input,
          n: 1,
          size: "512x512",
        }),
      });

      if (response.status === 401) {
        throw new Error('Invalid API Key. Please check and try again.');
      }

      if (!response.ok) {
        throw new Error('Failed to fetch image');
      }

      const data = await response.json();
      const imageUrl = data.data && data.data[0]?.url;

      if (imageUrl) {
        setImageUrl(imageUrl);
      } else {
        setError('No image generated. Please try again.');
      }
    } catch (err) {
      console.error(err);
      setError('An error occurred while generating the image.');
    } finally {
      setLoading(false);
    }
  };

  const previewPost = () => {
    if (h3Ref.current) {
      console.log(h3Ref.current.textContent); // Logs the value of the original h3 tag

      // Get the target h3 element by ID
      const previewH3 = document.getElementById("previewPost");

      // Assign the text content from h3Ref to the previewPost h3
      if (previewH3) {
        previewH3.textContent = h3Ref.current.textContent;
      }
    }

    if (boxRef.current) {
      const previewImg = document.getElementById("previewImage");
      if (previewImg) {
        previewImg.src = boxRef.current.src; // Copy the src from the original image
      }
    }
  };

  async function generatePost() {
    console.log("generating post");

    const APIBody = {
      "model": "gpt-4o",
      "messages": [
        {
          "role": "system",
          "content": "You will be provided with statements and you need to turn them into a Social media post description for an Irish pub called Bridget's Irish Public house without emojis"
        },
        {
          "role": "user",
          "content": input    //takes in user's input
        }
      ],
      "temperature": 0.7,
      "top_p": 1
    }

    try{
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer " + API_KEY
        },
        body: JSON.stringify(APIBody)
      });
      if (response.status === 401) {
        throw new Error('Invalid API Key. Please check and try again.');
      }
  
      if (!response.ok) {
        throw new Error(`API request failed with status: ${response.status}`);
      }
  
      const data = await response.json();
      console.log("API Response:", data); // Debugging
  
      // âœ… Fix: Check if choices exist before accessing [0]
      if (!data.choices || data.choices.length === 0) {
        throw new Error('Unexpected API response. No choices returned.');
      }
  
      setPost(data.choices[0].message.content.trim());
    }catch (err) {
      console.error("Error:", err.message);
      setError(err.message); // Display error in UI
    } 
  }

  return (
    <>
      <Box
        display="flex"
        flexDirection="row"
        justifyContent="space-between"
        alignItems="flex-start"
        padding={2}
        width="100%"
      >
        <Box display="flex" flexDirection="row" alignItems="flex-start" padding={2} height="150px" width="100%">
          <Box
            display="flex"
            justifyContent="center"
            alignItems="center"
            height="150px"
            width="100%"
            marginBottom={2}
          >
            {/* <Typography
            sx={{
              fontSize: 100,
              fontWeight: 'bold',
              color: "orange",
              fontFamily: 'Lobster, cursive',
            }}
          >
            <span style={{ color: "green" }}>AI</span>
            <span style={{ color: "orange" }}> Generator</span>
          </Typography>
          */}
          </Box>
        </Box>

        <Box
          sx={{
            borderRadius: '8px',
            backgroundColor: "#ded8d3",
            boxShadow: 3,
            m: 2,
            p: 2,
            display: "inline-flex",
            alignItems: "left",
            justifyContent: "space-between",
            flexDirection: 'column',
            marginTop: 4,
          }}
        >
          <Box sx={{ p: 3, alignItems: "center", justifyContent: "space-between", flexDirection: 'column' }}>
            {/* API Key Input */}
            <TextField
              id="api-key-input"
              label="API Key"
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              style={{ width: "100%", marginBottom: "20px" }}
              InputLabelProps={{
                style: { color: 'black' }
              }}
              InputProps={{
                style: { color: 'black' } // Change the text color
              }}
            />
          </Box>
          <Box sx={{ p: 3, alignItems: "center", justifyContent: "space-between", flexDirection: 'column' }}>
            <TextField
              id="outlined-controlled"
              label="USER INPUT"
              InputLabelProps={{
                style: { color: 'black' }
              }}
              inputRef={inputRef}
              style={{ width: "100%", height: "10%" }}
              InputProps={{
                style: { color: 'black' } // Change the text color
              }}
              sx={{
                backgroundColor: '', //colors.secondary[100],
                flex: 1,
                boxShadow: 3,
                borderWidth: 1,
                padding: 0.5,
              }}
            />

            <Button
              onClick={imageGenerator}
              sx={{
                margin: '5px',
                backgroundColor: "#bd5709",
                boxShadow: 3,
                color: 'black'
              }}
              disabled={loading}
            >
              {loading ? <CircularProgress size={24} /> : 'Generate Image'}
            </Button>

          </Box>

          {error && (
            <Typography color="error" sx={{ textAlign: "center", mt: 2 }}>
              {error}
            </Typography>
          )}

          <Box
            component="img"
            ref={boxRef}
            alt="AI Image"
            src={imageUrl === "/" ? default_image : imageUrl}
            style={{
              width: "500px",
              height: "500px",
              objectFit: "cover",
            }}
            sx={{
              border: `3px solid ${colors.secondary[100]}`,
              borderRadius: '8px',
              backgroundColor: colors.background.default,
              boxShadow: 3,
              p: 1
            }}
          />
        </Box>

        <Box display="flex" flexDirection="row" alignItems="flex-start" padding={2} height="150px" width="100%">
          <div className="App">
            <div>
              <style>
                {`
              textarea::placeholder {
                color: black;
              }
            `}
              </style>
              <textarea
                onChange={(e) => setInput(e.target.value)}
                placeholder='Enter a Description'
                cols={50}
                rows={10}
                style={{
                  margin: '12px',
                  borderRadius: '8px',
                  fontFamily: 'serif',
                  fontSize: '20px',
                  backgroundColor: "#ded8d3",
                  color: "black"
                }}
              />
            </div>
            <div>
              <button onClick={(generatePost)}
                style={{
                  borderRadius: "5px",
                  backgroundColor: "#bd5709",
                  fontFamily: 'serif',
                  fontSize: '20px',
                  margin: '10px'
                }}
              >Generate Post</button>
              {post !== "" ?
                <h3 ref={h3Ref} style={{
                  width: 'fit-content',
                  backgroundColor: '#ded8d3',
                  color: 'black',
                  margin: '10px',
                  padding: '5px'
                }}>{post}</h3>
                :
                <h3 style={{
                  width: 'fit-content',
                  backgroundColor: '#ded8d3',
                  color: 'black',
                  margin: '10px',
                  padding: '5px'
                }}>Your Post Will Appear Here</h3>
              }
            </div>
            <div
              style={{
                position: "fixed",
                bottom: "20px", // Distance from the bottom of the screen
                right: "20px",  // Distance from the right edge of the screen
                zIndex: 1000,   // Ensures it appears above other content
              }}>
              <button
                onClick={(previewPost)}
                style={{
                  borderRadius: "5px",
                  backgroundColor: "#bd5709",
                  fontFamily: 'serif',
                  fontSize: '50px'
                }}
              > Preview Post </button>
            </div>
          </div>

        </Box>
      </Box>
      <Box
        sx={{
          marginBottom: 4, // Adds some space between the sections
          padding: 2,
          width: "50%",
          backgroundColor: "#f1e6d7", // Cream-colored background
          borderRadius: "12px", // Rounded corners
          boxShadow: 2, // Optional: Adds shadow to preview section
          display: "flex", // Flexbox to stack the image and text
          flexDirection: "column", // Align items vertically
          alignItems: "center", // Center-align both image and text
          textAlign: "center", // Center the text
        }}>
        <div>
          <h3
            id="previewPost"
            style={{ color: 'black' }}
            aria-live="polite"
          >
            Content will appear here when you preview your post.
          </h3>
          <img
            id="previewImage"
            alt="preview"
            style={{ width: "500px", height: "500px", objectFit: "cover" }}
          />
        </div>
      </Box>
    </>
  );
};

export default AI_Image;
